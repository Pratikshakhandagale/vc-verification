"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var library_1 = require("@zxing/library");
var HTMLCanvasElementLuminanceSource_1 = require("./HTMLCanvasElementLuminanceSource");
var VideoInputDevice_1 = require("./VideoInputDevice");
/**
 * Base class for browser code reader.
 */
var BrowserCodeReader = /** @class */ (function () {
    /**
     * Creates an instance of BrowserCodeReader.
     *
     * @param reader The reader instance to decode the barcode
     * @param timeBetweenScansMillis the time delay between subsequent decode tries
     */
    function BrowserCodeReader(reader, timeBetweenScansMillis, hints) {
        if (timeBetweenScansMillis === void 0) { timeBetweenScansMillis = 500; }
        this.reader = reader;
        this.timeBetweenScansMillis = timeBetweenScansMillis;
        this.hints = hints;
    }
    /**
     * Obtain the list of available devices with type 'videoinput'.
     *
     * @return an array of available video input devices
     */
    BrowserCodeReader.prototype.getVideoInputDevices = function () {
        return new Promise(function (resolve, reject) {
            navigator.mediaDevices.enumerateDevices()
                .then(function (devices) {
                var sources = new Array();
                var c = 0;
                for (var i = 0, length = devices.length; i !== length; i++) {
                    var device = devices[i];
                    if (device.kind === 'videoinput') {
                        sources.push(new VideoInputDevice_1.VideoInputDevice(device.deviceId, device.label || "Video source " + c));
                        c++;
                    }
                }
                resolve(sources);
            })
                .catch(function (err) {
                reject(err);
            });
        });
    };
    /**
     * Decodes the barcode from the device specified by deviceId while showing the video in the specified video element.
     *
     * @param deviceId the id of one of the devices obtained after calling getVideoInputDevices.
     *  Can be undefined, in this case it will decode from one of the available devices,
     *  preffering the main camera (environment facing) if available.
     * @param videoElement the video element in page where to show the video while decoding.
     *  Can be either an element id or directly an HTMLVideoElement.
     *  Can be undefined, in which case no video will be shown.
     *
     * @return The decoding result.
     */
    BrowserCodeReader.prototype.decodeFromInputVideoDevice = function (deviceId, videoElement) {
        return __awaiter(this, void 0, void 0, function () {
            var constraints, stream;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.reset();
                        this.prepareVideoElement(videoElement);
                        if (deviceId) {
                            constraints = {
                                video: { facingMode: 'environment' },
                            };
                        }
                        else {
                            constraints = {
                                video: { deviceId: { exact: deviceId } },
                            };
                        }
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraints)];
                    case 1:
                        stream = _a.sent();
                        this.stream = stream;
                        this.videoElement.srcObject = stream;
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.videoPlayingEventListener = function () {
                                    _this.decodeOnceWithDelay(resolve, reject);
                                };
                                _this.videoElement.addEventListener('playing', _this.videoPlayingEventListener);
                                _this.videoElement.play();
                            })];
                }
            });
        });
    };
    /**
     * Decodes a barcode form a video url.
     *
     * @param videoUrl The video url to decode from, required.
     * @param videoElement The video element where to play the video while decoding.
     *  Can be undefined in which case no video is shown.
     *
     * @return The decoding result.
     */
    BrowserCodeReader.prototype.decodeFromVideoSource = function (videoUrl, videoElement) {
        this.reset();
        this.prepareVideoElement(videoElement);
        var me = this;
        return new Promise(function (resolve, reject) {
            me.videoPlayEndedEventListener = function () {
                me.stop();
                reject(new library_1.NotFoundException());
            };
            if (!me.videoElement) {
                throw new Error('The video element is not defined!');
            }
            me.videoElement.addEventListener('ended', me.videoPlayEndedEventListener);
            me.videoPlayingEventListener = function () {
                me.decodeOnceWithDelay(resolve, reject);
            };
            me.videoElement.addEventListener('playing', me.videoPlayingEventListener);
            me.videoElement.setAttribute('autoplay', 'true');
            me.videoElement.setAttribute('src', videoUrl);
        });
    };
    /**
     * Decodes the barcode from an image.
     *
     * @param imageElement The image element that can be either an element id or the element itself.
     *  Can be undefined in which case the decoding will be done from the imageUrl parameter.
     * @param imageUrl
     *
     * @return The decoding result.
     */
    BrowserCodeReader.prototype.decodeFromImage = function (imageElement, imageUrl) {
        var _this = this;
        this.reset();
        if (!imageElement && !imageUrl) {
            throw new library_1.ArgumentException('either imageElement with a src set or an url must be provided');
        }
        this.prepareImageElement(imageElement);
        return new Promise(function (resolve, reject) {
            if (!_this.imageElement || !imageUrl) {
                throw new library_1.ArgumentException('imageElement with a src set or an url must be provided');
            }
            if (undefined !== imageUrl) {
                _this.imageLoadedEventListener = function () {
                    _this.decodeOnce(resolve, reject, false, true);
                };
                _this.imageElement.addEventListener('load', _this.imageLoadedEventListener);
                _this.imageElement.src = imageUrl;
            }
            else if (_this.isImageLoaded(_this.imageElement)) {
                _this.decodeOnce(resolve, reject, false, true);
            }
            else {
                throw new library_1.ArgumentException("either src or a loaded img should be provided");
            }
        });
    };
    /**
     * Resets the code reader to the initial state. Cancels any ongoing barcode scanning from video or camera.
     */
    BrowserCodeReader.prototype.reset = function () {
        this.stop();
        if (undefined !== this.videoPlayEndedEventListener && undefined !== this.videoElement) {
            this.videoElement.removeEventListener('ended', this.videoPlayEndedEventListener);
        }
        if (undefined !== this.videoPlayingEventListener && undefined !== this.videoElement) {
            this.videoElement.removeEventListener('playing', this.videoPlayingEventListener);
        }
        if (undefined !== this.videoElement) {
            this.videoElement.srcObject = null;
            this.videoElement.removeAttribute('src');
            delete this.videoElement;
        }
        if (undefined !== this.videoPlayEndedEventListener && undefined !== this.imageElement) {
            this.imageElement.removeEventListener('load', this.imageLoadedEventListener);
        }
        if (undefined !== this.imageElement) {
            delete this.imageElement.src;
            this.imageElement.removeAttribute('src');
            delete this.imageElement;
        }
        delete this.canvasElementContext;
        delete this.canvasElement;
    };
    /**
     * This will remain protected, so who extends this class can customize this method.
     */
    BrowserCodeReader.prototype.drawImageOnCanvas = function (canvasElementContext, srcElement) {
        canvasElementContext.drawImage(srcElement, 0, 0);
    };
    BrowserCodeReader.prototype.readerDecode = function (binaryBitmap) {
        return this.reader.decode(binaryBitmap, this.hints);
    };
    BrowserCodeReader.prototype.prepareVideoElement = function (videoElement) {
        if (undefined === videoElement) {
            this.videoElement = document.createElement('video');
            this.videoElement.width = 640;
            this.videoElement.height = 480;
        }
        else if (typeof videoElement === 'string') {
            this.videoElement = this.getMediaElement(videoElement, 'video');
        }
        else {
            this.videoElement = videoElement;
        }
        // Needed for iOS 11
        this.videoElement.setAttribute('autoplay', 'true');
        this.videoElement.setAttribute('muted', 'true');
        this.videoElement.setAttribute('playsinline', 'true');
        this.videoElement.setAttribute('autofocus', 'true');
    };
    BrowserCodeReader.prototype.prepareImageElement = function (imageElement) {
        if (!imageElement) {
            this.imageElement = document.createElement('img');
            this.imageElement.width = 200;
            this.imageElement.height = 200;
        }
        else if (typeof imageElement === 'string') {
            this.imageElement = this.getMediaElement(imageElement, 'img');
        }
        else {
            this.imageElement = imageElement;
        }
    };
    BrowserCodeReader.prototype.getMediaElement = function (mediaElementId, type) {
        var mediaElement = document.getElementById(mediaElementId);
        if (!mediaElement) {
            throw new library_1.ArgumentException("element with id '" + mediaElementId + "' not found");
        }
        if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {
            throw new library_1.ArgumentException("element with id '" + mediaElementId + "' must be an " + type + " element");
        }
        return mediaElement;
    };
    BrowserCodeReader.prototype.isImageLoaded = function (img) {
        // During the onload event, IE correctly identifies any images that
        // weren’t downloaded as not complete. Others should too. Gecko-based
        // browsers act like NS4 in that they report this incorrectly.
        if (!img.complete) {
            return false;
        }
        // However, they do have two very useful properties: naturalWidth and
        // naturalHeight. These give the true size of the image. If it failed
        // to load, either of these should be zero.
        if (img.naturalWidth === 0) {
            return false;
        }
        // No other way of checking: assume it’s ok.
        return true;
    };
    BrowserCodeReader.prototype.decodeOnceWithDelay = function (resolve, reject) {
        var handler = this.decodeOnce.bind(this, resolve, reject);
        var timeout = this.timeBetweenScansMillis;
        this.timeoutHandler = window.setTimeout(handler, timeout);
    };
    BrowserCodeReader.prototype.decodeOnce = function (resolve, reject, retryIfNotFound, retryIfChecksumOrFormatError) {
        if (retryIfNotFound === void 0) { retryIfNotFound = true; }
        if (retryIfChecksumOrFormatError === void 0) { retryIfChecksumOrFormatError = true; }
        if (undefined === this.canvasElementContext) {
            this.prepareCaptureCanvas();
        }
        this.drawImageOnCanvas(this.canvasElementContext, this.videoElement || this.imageElement);
        var luminanceSource = new HTMLCanvasElementLuminanceSource_1.HTMLCanvasElementLuminanceSource(this.canvasElement);
        var binaryBitmap = new library_1.BinaryBitmap(new library_1.HybridBinarizer(luminanceSource));
        try {
            var result = this.readerDecode(binaryBitmap);
            resolve(result);
        }
        catch (re) {
            if (retryIfNotFound && re instanceof library_1.NotFoundException) {
                // Not found, trying again
                this.decodeOnceWithDelay(resolve, reject);
            }
            else if (retryIfChecksumOrFormatError && (re instanceof library_1.ChecksumException
                || re instanceof library_1.FormatException)) {
                // checksum or format error, trying again
                this.decodeOnceWithDelay(resolve, reject);
            }
            else {
                reject(re);
            }
        }
    };
    BrowserCodeReader.prototype.prepareCaptureCanvas = function () {
        var canvasElement = document.createElement('canvas');
        var width;
        var height;
        if (undefined !== this.videoElement) {
            width = this.videoElement.videoWidth;
            height = this.videoElement.videoHeight;
        }
        else {
            if (this.imageElement) {
                width = this.imageElement.naturalWidth || this.imageElement.width;
                height = this.imageElement.naturalHeight || this.imageElement.height;
            }
        }
        canvasElement.style.width = width + "px";
        canvasElement.style.height = height + "px";
        canvasElement.width = width || 0;
        canvasElement.height = height || 0;
        this.canvasElement = canvasElement;
        this.canvasElementContext = canvasElement.getContext('2d');
        // this.videoElement.parentElement.appendChild(this.canvasElement)
    };
    BrowserCodeReader.prototype.stop = function () {
        if (this.timeoutHandler) {
            window.clearTimeout(this.timeoutHandler);
            this.timeoutHandler = undefined;
        }
        if (this.stream) {
            this.stream.getTracks()[0].stop();
            this.stream = undefined;
        }
    };
    return BrowserCodeReader;
}());
exports.BrowserCodeReader = BrowserCodeReader;
